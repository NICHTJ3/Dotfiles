#!/bin/bash
set -e

# Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
# (Inspired by: https://gist.github.com/lann/6771001)
SOCK_SYMLINK=~/.ssh/ssh_auth_sock
if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
  ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
fi

function createTmuxFile(){
  echo Creating a .tmux file
  echo "\
#!/bin/bash
set -e
function attachOrSwitch(){
  if [[ \$TMUX ]];then
    tmux switch-client -t $1\$1
  else
    tmux attach -t $1\$1
  fi
}

# Attach to the session if it already exists
if tmux has-session -t=$1 2> /dev/null; then
  attachOrSwitch; exit
fi

# Create a new session with the first window being called vim
tmux new-session -d -s $1 -n vim -x $(tput cols) -y $(tput lines)

# 1. Main window: vim, server, shell.
tmux send-keys -t $1:vim \"nvim -c Files\" Enter
tmux split-window -t $1:vim -h
# You could send commands to this window like
# tmux send-keys -t $1:vim.right \"git status\" Enter
tmux split-window -t $1:vim.2
# You could send commands to this window like
# tmux send-keys -t $1:vim.bottom-right \"git status\" Enter

# 2. Create a second window you could create splits etc in the same way as the
# above section
tmux new-window -t $1 -c '$PWD' -n window-2

# Attach to the newly created session
attachOrSwitch :vim.left
" > .tmux
echo Giving the new file execute permissions so we can use it in the future
chmod +x .tmux
}

function init(){
  SESSION_NAME=$(basename "$(pwd)" | sed -e s/\\./_/g)
  if [[ ! -f ./.tmux && ! -d ./.tmux ]]; then
    createTmuxFile "$SESSION_NAME"
    echo Created a .tmux file have a look inside if you want to change anything
  else
    echo There is already a .tmux file or directory remove it before running this command
  fi
}

# Prompt to trust the first time we see a given  file before running it as a shell script
function validateAndRunFile(){
  DIGEST="$(openssl sha512 $1)"
  if ! grep -q "$DIGEST" ~/.config/..tmux.digests 2> /dev/null; then
    cat $1
    echo
    read -p "REPLY? Trust (and run) this $2 file? (t = trust, otherwise = skip) " -r
    echo
    if [[ $REPLY =~ ^[Tt]$ ]]; then
      echo "$DIGEST" >> ~/.config/..tmux.digests
      ./$1
    fi
  else
    ./$1
  fi
}

# Attach to existing session, or create one, based on current directory.
function attachOrCreateSession(){
  SESSION_NAME=$(basename "$(pwd)" | sed -e s/\\./_/g)

  # Create a session if it doesn't already exist
  if ! tmux has-session -t="$SESSION_NAME" 2> /dev/null; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -s "$SESSION_NAME" -d
  fi

  # Attach to the session created above even if we're in tmux
  if [[ $TMUX ]];then
    tmux switch-client -t "$SESSION_NAME"
  else
    tmux attach -t "$SESSION_NAME"
  fi
}



function killHook(){
  if [[ -x ./.tmux.down.sh && ! -d ./tmux.down.sh ]]; then
    validateAndRunFile .tmux.down.sh .tmux.down.sh
  fi
}

# Pass unknown args to tmux
function passArgsToTmux(){
  env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
}

function main() {
  TMUX_ARGS=""
  for i in "$@"
  do
     # Commands we've added
    if [[ $i == 'init' || $i == '--init' ]]; then
      init
      exit
    fi
     # Hooks to run before tmux
    if [[ $i == 'kill-session' ]]; then
      killHook
    fi
    TMUX_ARGS+="$i "
  done

  # If we passed additional args just run tmux normally with those args
  if [[ -n "$TMUX_ARGS" ]]; then
    passArgsToTmux $TMUX_ARGS
    exit
  fi

  # If we haven't supplied args and there is a .tmux file in the current directory,
  # validate it's not malicious and run it.
  if [[ -x .tmux && ! -d .tmux ]]; then
    validateAndRunFile .tmux .tmux
    exit
  fi

  # Otherwise create or attach to a session based on the current directory
  attachOrCreateSession
}

main "$@"
